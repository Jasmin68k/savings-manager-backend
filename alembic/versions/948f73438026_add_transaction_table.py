"""add_transaction_table

Revision ID: 948f73438026
Revises: bb354b32277a
Create Date: 2024-03-03 18:59:52.472515

"""
from typing import Sequence, Union

import sqlalchemy as sa
import sqlalchemy_utc
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = '948f73438026'
down_revision: Union[str, None] = 'bb354b32277a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('transactions',
    sa.Column('description', sa.String(), nullable=False, comment='The description of the transaction action.'),
    sa.Column('transaction_type', sa.Enum('DIRECT', 'DISTRIBUTION', name='transactiontype'), nullable=False, comment='The type of the transaction. Possible values: direct or distribution.'),
    sa.Column('transaction_trigger', sa.Enum('MANUALLY', 'AUTOMATICALLY', name='transactiontrigger'), nullable=False, comment='The transaction trigger type, possible values: manually, automatically. Says, if balance was deposit or withdrawn manually or automatically.'),
    sa.Column('amount', sa.Integer(), nullable=False, comment='The current amount of the transaction. Can be negative, negative = withdraw, positive = deposit.'),
    sa.Column('balance', sa.Integer(), nullable=False, comment='The balance of the moneybox at the time of the transaction.'),
    sa.Column('counterparty_moneybox_id', sa.Integer(), nullable=True, comment='Transaction is a transfer between moneybox_id and counterparty_moneybox_id, if set.'),
    sa.Column('moneybox_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False, comment='The primary ID of the row.'),
    sa.Column('created_at', sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True), nullable=False, comment='The created utc datetime.'),
    sa.Column('modified_at', sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True), nullable=True, comment='The modified utc datetime.'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Flag to mark instance as deleted.'),
    sa.ForeignKeyConstraint(['counterparty_moneybox_id'], ['moneyboxes.id'], name=op.f('fk_transactions_counterparty_moneybox_id_moneyboxes')),
    sa.ForeignKeyConstraint(['moneybox_id'], ['moneyboxes.id'], name=op.f('fk_transactions_moneybox_id_moneyboxes')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_transactions'))
    )
    op.alter_column('moneyboxes', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True),
               existing_comment='The created utc datetime.',
               existing_nullable=False)
    op.alter_column('moneyboxes', 'modified_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True),
               existing_comment='The modified utc datetime.',
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('moneyboxes', 'modified_at',
               existing_type=sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_comment='The modified utc datetime.',
               existing_nullable=True)
    op.alter_column('moneyboxes', 'created_at',
               existing_type=sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_comment='The created utc datetime.',
               existing_nullable=False)
    op.drop_table('transactions')

    sa.Enum(name="transactiontype").drop(op.get_bind(), checkfirst=False)
    sa.Enum(name="transactiontrigger").drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###
